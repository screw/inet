[General]

network = Stability
#network = Hexagon

parallel-simulation = false
warnings = true
#sim-time-limit = 100s


#cmdenv-module-messages = true # for normal (non-express) mode only
#**.cmdenv-log-level = true
#cmdenv-event-banners = true   # for normal (non-express) mode only

#tkenv-plugin-path = ../../../etc/plugins

#**.useAdminDist = true
*.configurator.dumpAddresses = true
*.configurator.dumpTopology = true
*.configurator.dumpLinks = true
*.configurator.dumpRoutes = true

# Visualizer settings
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.*.displayRoutes = true
*.visualizer.networkRouteVisualizer.fadeOutMode = "simulationTime"
#*.visualizer.networkRouteVisualizer.fadeOutMode = "simulationTime"
*.visualizer.networkRouteVisualizer.fadeOutTime = 1s
*.visualizer.networkRouteVisualizer.nodeFilter = "not (routerCore*)"

#*.visualizer.interfaceTableVisualizer.nodeFilter = "not (*switch* or *Switch* or *AP*)"


#
# Network specific settings
#


# OSPF

**.ospf.ospfConfig = xmldoc("ASConfig.xml")
**.ospf.helloInterval = 10s
**.ospf.pollInterval = 120s
**.ospf.retransmissionInterval = 5s
**.ospf.interfaceTransmissionDelay = 1s
**.ospf.routerDeadInterval = 40s
**.ospf.authentication.typename = "NullType"
**.ospf.authenticationKey = "0x00"


**routerCore*.hasDmpr = true


# set inet_addr, Mask, MTU ( = 1500), default route (=router)
#**.client.routingFile = "client.mrt"
#**.router.routingFile = "router.mrt"
#**.server.routingFile = "server.mrt"

# ip settings
**.ip.procDelay = 0s
**.IPForward = false

# hookType settings
#**.eth[*].numOutputHooks = 1
#**.eth[*].outputHook[0].typename = "OrdinalBasedDropper" # Nop | ThruputMeter | OrdinalBasedDropper | OrdinalBasedDuplicator

# ARP settings
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s


#**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
#**.tcp.nagleEnabled = false                           # Nagle's algorithm (RFC 896) enabled/disabled
#**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
#**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
#**.tcp.sackSupport = false                            # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
#**.tcp.windowScalingSupport = true                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
#**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
#**.tcp.tcpAlgorithmClass = "DumbTcp"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
#**.tcp.advertisedWindow = 5000000
#**.tcp.recordStats = true
#**.tcp.mss = 1460

#**.tcp.ecnEnabled = true
#**.tcp.ssthresh = 1




# Queue setting


**.routerCore*.eth[*].mac.queue.typename       = "RedMarkerQueue"
**.routerCore*.eth[*].mac.queue.red.wq         = 1 #0.002 #0.8
**.routerCore*.eth[*].mac.queue.red.minths     = "3" #"5"
**.routerCore*.eth[*].mac.queue.red.maxths     = "4"  
**.routerCore*.eth[*].mac.queue.red.maxps      = "1"
**.routerCore*.eth[0].mac.queue.red.pkrates    = "8333.3333"
**.routerCore*.eth[*].mac.queue.red.pkrates    = "833.3333"
**.routerCore*.eth[*].mac.queue.red.marks 	   = "1"
**.routerCore*.eth[*].mac.queue.red.recStart   = 0
**.routerCore*.eth[*].mac.queue.red.packetCapacity = 24 # 24 is approx 2xBDP of RTT=14ms, datarate = 10Mbps, packet = 1460B



# Statistics collection declaration

warmup-period = 119s

**.receiver**.app**.statistic-recording = true
**.receiver**.app**.scalar-recording = true
**.receiver**.app**.vector-recording = true

**.receiver**.tcp**.statistic-recording = true
**.receiver**.tcp**.scalar-recording = true
**.receiver**.tcp**.vector-recording = true

**.sender**.tcp**.statistic-recording = true
**.sender**.tcp**.scalar-recording = true
**.sender**.tcp**.vector-recording = true

**.red**.statistic-recording = true
**.red**.scalar-recording = true
**.red**.vector-recording = true

**.dmpr**.statistic-recording = true
**.dmpr**.scalar-recording = true
**.dmpr**.vector-recording = true


**.routerCore*.**encap.**.statistic-recording = true
**.routerCore*.**encap.**.scalar-recording = true
**.routerCore*.**encap.**.vector-recording = true

**.routerCore*.**mac.**.statistic-recording = true
**.routerCore*.**mac.**.scalar-recording = true
**.routerCore*.**mac.**.vector-recording = true

**.statistic-recording = false
**.scalar-recording = false
**.vector-recording = false

#**.statistic-recording = true
#**.scalar-recording = true
#**.vector-recording = true

################################################################
#################### END DEFAULT config ########################
################################################################
[Config StabilityTcpTwoSenders]
extends = Stability, RedMarker, TcpSender1, TcpSender2, IntervalAlpha
sim-time-limit = 140s
repeat = 20

**.receiver1.eth[0].numInputHooks = 1
**.receiver1.eth[0].inputHook[0].typename = "TcpReorder"

**.receiver2.eth[0].numInputHooks = 1
**.receiver2.eth[0].inputHook[0].typename = "TcpReorder"
**.dupthresh = 20


**.routerCore*.eth[*].mac.queue.typename       = "RedMarkerQueue"
**.routerCore*.eth[*].mac.queue.red.wq         = 1 #0.002 #0.8

**.routerCore*.eth[*].mac.queue.red.minth     = "12" #"5"
**.routerCore*.eth[*].mac.queue.red.maxth     = "13"  
**.routerCore*.eth[*].mac.queue.red.maxp      = "1"
**.routerCore{1..4}*.eth[0].mac.queue.red.pkrate    = "8333.3333"
**.routerCore*.eth[*].mac.queue.red.pkrate    = "833.3333"
**.routerCore*.eth[*].mac.queue.red.marks 	   = "1"
**.routerCore*.eth[*].mac.queue.red.recStart   = 0
**.routerCore*.eth[*].mac.queue.red.packetCapacity = 99999 # 24 is approx 2xBDP of RTT=14ms, datarate = 10Mbps, packet = 1460B

[Config StabilityTcpSender1bAsym]
extends = TcpSender1b, StabilityTcpSender1Asym


[Config StabilityTcpSender1Asym]
extends = StabilityAsym, RedMarker, TcpSender1, IntervalAlpha
sim-time-limit = 180s
repeat = 1
**.dupthresh = 999
**.dmpr.min_threshold = 0.01
#constraint = ${hasDmpr}

#**.rouerCore5.eth[0].channel.datarate = 5Mbps
#**.rouerCore6.eth[0].channel.datarate = 5Mbps
**.routerCore1.ethg$o[2].channel.datarate = 100Mbps
**.routerCore5.ethg$o[1].channel.datarate = 100Mbps

**.routerCore2.ethg$o[2].channel.datarate = 100Mbps
**.routerCore6.ethg$o[1].channel.datarate = 100Mbps

#**.receiver1.eth[0].numInputHooks = 1
#**.receiver1.eth[0].inputHook[0].typename = "TcpReorder"

**.routerCore*.eth[*].mac.queue.typename       = "RedMarkerQueue"
**.routerCore*.eth[*].mac.queue.red.wq         = 1 #0.002 #0.8
# minth calculated as BDP/7; BDP = 10Mbps * 12ms (RTT delay) = 1.2Mb = 0.15MB; 0.15MB/1500B (packet size) = 100 so 100/7 = 14.2packets
**.routerCore*.eth[*].mac.queue.red.minth     = 12 #"5"
**.routerCore*.eth[*].mac.queue.red.maxth     = 13  
**.routerCore*.eth[*].mac.queue.red.maxp      = 1
**.routerCore{1..4}*.eth[0].mac.queue.red.pkrate    = 8333.3333
**.routerCore6.eth[1].mac.queue.red.pkrate    = 8333.3333
**.routerCore1.eth[2].mac.queue.red.pkrate    = 8333.3333
**.routerCore*.eth[*].mac.queue.red.pkrate    = 833.3333
**.routerCore*.eth[*].mac.queue.red.marks 	   = "1"
**.routerCore*.eth[*].mac.queue.red.recStart   = 0
**.routerCore*.eth[*].mac.queue.red.packetCapacity = 99999 # 24 is approx 2xBDP of RTT=14ms, datarate = 10Mbps, packet = 1460B



[Config StabilityTcpSender1]
extends = Stability, RedMarker, TcpSender1

[Config StabilityTwoSendersB]
extends = StabilityTwoSenders
# 1.33ms =9Mbps; 1.2ms=10Mbps; 1.090ms=11Mbps; 1ms= 12Mbps; 0.923ms=13Mbps; 0.857ms=14Mbps; 0.8=15Mbps
# 0.75ms=16Mbps; 0.705ms=17Mbps; 0.666ms=18Mbps; 0.631=19Mbps; 0.6ms=20Mbps

**.sender1.app[0].sendInterval = 0.6ms
**.sender2.app[0].sendInterval = 1.2ms 



[Config StabilityTwoSenders]
extends = Stability, RedMarker, Sender1, Sender2, IntervalAlpha
sim-time-limit = 140s
repeat = 20


#**.sender1.app[0].startTime = uniform(120s, 120.001s)
#**.sender2.app[0].startTime = uniform(120s, 120.001s)

[Config HexSingleUdpSimpleCross]
extends = Stability, RedMarker, UdpCrossSimple, SingleConnUdp, IntervalAlpha
sim-time-limit = 140s
repeat = 10

[Config HexSingleConnUdpRedUdpCrossIntervalAlpha]
extends = Stability, RedMarker, UDPCrossTraffic2, SingleConnUdp, IntervalAlpha 


[Config HexSingleConnUdpRedUdpCross]
extends = Stability, RedMarker, UDPCrossTraffic, SingleConnUdp, hasDmpr  



[Config HexSingleConnDupthreshRedUdpCross]
extends = Stability, Dupthresh, RedMarker, UDPCrossTraffic, SingleConn, hasDmpr  


[Config HexSingleConnDupthreshRedStartCross]
extends = Stability, Dupthresh, RedMarker, StartCross, SingleConn, hasDmpr  


[Config HexSingleConnDupthreshRed]
extends = Stability, Dupthresh, RedMarker, SingleConn, hasDmpr  



[Config HexSingleConnDupthresh]
extends = Stability, Dupthresh, SingleConn, hasDmpr  


[Config HexSingleConnRed]
extends = Stability, RedMarker , SingleConn, hasDmpr  


[Config ConnHex]
extends = Stability, Dupthresh, hasDmpr, Conn, CrossTraffic 



[Config SingleConnHex]

extends = SingleConn, Stability, hasDmpr




[Config TwoConnHex]
extends = TwoConn, Stability, hasDmpr



[Config SingleConnCrossHex]

extends = SingleConn, Stability, CrossTraffic, hasDmpr



[Config TwoConnCrossHex]
extends = TwoConn, Stability, CrossTraffic, hasDmpr


######################################################
####### Partial configs - NOT TO BE RUN #############
######################################################
[Config PartialConfigsStartHere]





[Config Stability]
network = Stability
**.ospf.ospfConfig = xmldoc("ASConfig.xml")

[Config StabilityAsym]
network = StabilityAsym
**.ospf.ospfConfig = xmldoc("ASConfigStabilityAsym.xml")

[Config hasDmpr]

**.hasDmpr = ${hasDmpr = true, false}

[Config SingleConnOspf]

extends = SingleConn
**.hasDmpr = false

[Config TcpSender1]

**.arp.typename = "GlobalArp"
**.hasDmpr = true

**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = false                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                            # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = true                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.tcpAlgorithmClass = "DcTcp"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
**.tcp.advertisedWindow = 5000000
**.tcp.recordStats = true
**.tcp.mss = 1460

**.tcp.ecnEnabled = true
#**.tcp.ssthresh = 1



**.sender1.numApps = 1
**.receiver1.numApps = 1

**.sender1.app[0].typename = "TcpSessionApp"
**.sender1.app[0].active = true
**.sender1.app[0].localPort = -1
**.sender1.app[0].sendBytes = 500MiB
**.sender1.app[0].sendScript = ""
**.sender1.app[0].tClose = -1s
**.sender1.app[0].connectPort = 1000
**.sender1.app[0].connectAddress = "receiver1"

**.sender1.app[0].tOpen = 120s


**.receiver1.app[0].typename = "TcpSinkApp"
**.receiver1.app[0].localPort = 1000

#**.receiver1.**tcp.tcpAlgorithmClass= ${TCP="TcpReno", "TcpTahoe", "TcpNewReno", "TcpNoCongestionControl", "DumbTcp", "TcpVegas", "TcpWestwood"}

[Config TcpSender1b]

**.arp.typename = "GlobalArp"
**.hasDmpr = true

**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = false                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                            # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = true                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.tcpAlgorithmClass = "DcTcp"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
**.tcp.advertisedWindow = 5000000
**.tcp.recordStats = true
**.tcp.mss = 1460

**.tcp.ecnEnabled = true
#**.tcp.ssthresh = 1



**.sender1.numApps = 2
**.receiver1.numApps = 2

**.sender1.app[1].typename = "TcpSessionApp"
**.sender1.app[1].active = true
**.sender1.app[1].localPort = -1
**.sender1.app[1].sendBytes = 500MiB
**.sender1.app[1].sendScript = ""
**.sender1.app[1].tClose = -1s
**.sender1.app[1].connectPort = 1001
**.sender1.app[1].connectAddress = "receiver1"

**.sender1.app[1].tOpen = 120s


**.receiver1.app[1].typename = "TcpSinkApp"
**.receiver1.app[1].localPort = 1001

#**.receiver1.**tcp.tcpAlgorithmClass= ${TCP="TcpReno", "TcpTahoe", "TcpNewReno", "TcpNoCongestionControl", "DumbTcp", "TcpVegas", "TcpWestwood"}



[Config TcpSender2]

**.arp.typename = "GlobalArp"
**.hasDmpr = true

**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = false                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                            # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = true                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.tcpAlgorithmClass = "DcTcp"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
**.tcp.advertisedWindow = 5000000
**.tcp.recordStats = true
**.tcp.mss = 1460

**.tcp.ecnEnabled = true
#**.tcp.ssthresh = 1



**.sender2.numApps = 1
**.receiver2.numApps = 1

**.sender2.app[0].typename = "TcpSessionApp"
**.sender2.app[0].active = true
**.sender2.app[0].localPort = -1
**.sender2.app[0].sendBytes = 100MiB
**.sender2.app[0].sendScript = ""
**.sender2.app[0].tClose = -1s
**.sender2.app[0].connectPort = 1000
**.sender2.app[0].connectAddress = "receiver2"

**.sender2.app[0].tOpen = 120s


**.receiver2.app[0].typename = "TcpSinkApp"
**.receiver2.app[0].localPort = 1000

#**.receiver1.**tcp.tcpAlgorithmClass= ${TCP="TcpReno", "TcpTahoe", "TcpNewReno", "TcpNoCongestionControl", "DumbTcp", "TcpVegas", "TcpWestwood"}



[Config SingleConn]
#network = Fulltest


**.sender1.numApps = 1
**.receiver1.numApps = 1

**.sender1.app[0].typename = "TcpSessionApp"
**.sender1.app[0].active = true
**.sender1.app[0].localPort = -1
**.sender1.app[0].sendBytes = 100MiB
**.sender1.app[0].sendScript = ""
**.sender1.app[0].tClose = -1s
**.sender1.app[0].connectPort = 1000
**.sender1.app[0].connectAddress = "receiver1"

**.sender1.app[0].tOpen = 20s


**.receiver1.app[0].typename = "TcpSinkApp"
**.receiver1.app[0].localPort = 1000

#**.receiver1.**tcp.tcpAlgorithmClass= ${TCP="TcpReno", "TcpTahoe", "TcpNewReno", "TcpNoCongestionControl", "DumbTcp", "TcpVegas", "TcpWestwood"}




[Config TwoConn]
#network = Fulltest



**.sender1.numApps = 1
**.client199.numApps = 1
**.receiver1.numApps = 2

**.client1*.app[0].typename = "TcpSessionApp"
**.client1*.app[0].active = true
**.client1*.app[0].localPort = -1
**.client1*.app[0].sendBytes = 100MiB
**.client1*.app[0].sendScript = ""
**.client1*.app[0].tClose = -1s
**.sender1.app[0].connectPort = 1000
**.client199.app[0].connectPort = 1001
**.sender1.app[0].connectAddress = "receiver1"
**.client199.app[0].connectAddress = "client401"



**.sender1.app[0].tOpen = 20s
**.client199.app[0].tOpen = 20s


**.receiver1.app[0].typename = "TcpSinkApp"
**.receiver1.app[0].localPort = 1000

**.receiver1.app[1].typename = "TcpSinkApp"
**.receiver1.app[1].localPort = 1001


[Config Conn]
#connections definitions

**.sender1.numApps = 1
**.client199.numApps = ${default, 1 ! conn}
**.receiver1.numApps = ${conn= 1, 2}

**.sender1.app[0].typename = "TcpSessionApp"
**.sender1.app[0].active = true
**.sender1.app[0].localPort = -1
**.sender1.app[0].sendBytes = 100MiB
**.sender1.app[0].sendScript = ""
**.sender1.app[0].tClose = -1s
**.sender1.app[0].connectPort = 1000
**.sender1.app[0].connectAddress = "receiver1"

**.client199.app[0].typename = "TcpSessionApp"
#**.client199.app[0].active = ${default, true ! conn}
#**.client199.app[0].localPort = ${default, -1 ! conn}
**.client199.app[0].sendBytes = 100MiB 
#**.client199.app[0].sendScript = ${default,"" ! conn}
**.client199.app[0].tClose = -1s 


**.client199.app[0].connectPort = 1001
**.client199.app[0].connectAddress = "client401"



**.sender1.app[0].tOpen = 20s
**.client199.app[0].tOpen = 20s 


**.receiver1.app[0].typename = "TcpSinkApp"
**.receiver1.app[0].localPort = 1000

**.receiver1.app[1].typename = "TcpSinkApp"
**.receiver1.app[1].localPort = 1001


[Config CrossTraffic]

**.cross = ${cross = "On", "Off"}

**.client201.numApps = ${1, default !cross}
**.client399.numApps = ${1, default !cross}

#**.client601.app[0].typename = ${"TcpSessionApp", default !cross}
**.client201.app[0].typename = "TcpSessionApp"
#**.client601.app[0].active = ${true, default !cross}
#**.client601.app[0].localPort = ${-1, default !cross}
#**.client601.app[0].sendBytes = ${2MiB, default !cross}
**.client201.app[0].sendBytes = 100MiB
#**.client601.app[0].sendScript = ${"", default !cross}
**.client201.app[0].tClose = -1s
**.client201.app[0].connectPort = 1000
**.client201.app[0].connectAddress = "client399"

**.client201.app[0].tOpen = 20s


**.client399.app[0].typename = "TcpSinkApp"
**.client399.app[0].localPort = 1000
#**.client201.tcp.duptresh = default


[Config StartCross]
extends = CrossTraffic

**.client201.app[0].tOpen = ${tOpen=19,20, 22 }s
constraint = ($cross == "On" || ($cross =="Off" && $tOpen==20))



[Config SingleConnUdp]
#
#**.cross = ${cross = "On", "Off"}
#
#**.sender1.numApps = ${1, default !cross}
#**.receiver1.numApps = ${1, default !cross}

**.sender1.numApps = 1
**.receiver1.numApps = 1

#**.client601.app[0].typename = ${"TcpSessionApp", default !cross}
**.sender1.app[0].typename = "UdpEcnSender"
#**.client601.app[0].active = ${true, default !cross}
#**.client601.app[0].localPort = ${-1, default !cross}
#**.client601.app[0].sendBytes = ${2MiB, default !cross}
**.sender1.app[0].messageLength = 1468B
#**.client601.app[0].sendScript = ${"", default !cross}
**.sender1.app[0].stopTime = -1s
# 1.33ms =9Mbps; 1.2ms=10Mbps; 1.090ms=11Mbps; 1ms= 12Mbps; 0.923ms=13Mbps; 0.857ms=14Mbps; 0.8=15Mbps
# 0.75ms=16Mbps; 0.705ms=17Mbps; 0.666ms=18Mbps; 0.631=19Mbps; 0.6ms=20Mbps
**.sender1.app[0].sendInterval = 0.923ms 
**.sender1.app[0].destPort = 1000
**.sender1.app[0].destAddresses = "receiver1"

**.sender1.app[0].startTime = 20s
**.sender1.app[0].burstDuration = 10s
**.sender1.app[0].sleepDuration = 0s


**.receiver1.app[0].typename = "UdpEcnReceiver"
**.receiver1.app[0].localPort = 1000
#**.client201.tcp.duptresh = default



[Config UDPCrossTraffic]

**.cross = ${cross = "On", "Off"}

**.client201.numApps = ${1, default !cross}
**.client399.numApps = ${1, default !cross}

#**.client601.app[0].typename = ${"TcpSessionApp", default !cross}
**.client201.app[0].typename = "UdpEcnSender"
#**.client601.app[0].active = ${true, default !cross}
#**.client601.app[0].localPort = ${-1, default !cross}
#**.client601.app[0].sendBytes = ${2MiB, default !cross}
**.client201.app[0].messageLength = 1468B
#**.client601.app[0].sendScript = ${"", default !cross}
**.client201.app[0].stopTime = -1s
**.client201.app[0].sendInterval = 2.4ms #1.33ms = 9Mbps; 1.2 = 10Mbps; 1.6 = 7.5Mbps; 1ms = 12Mbps
**.client201.app[0].destPort = 1000
**.client201.app[0].destAddresses = "client399"

**.client201.app[0].startTime = 20s
**.client201.app[0].burstDuration = 10s
**.client201.app[0].sleepDuration = 10s


**.client399.app[0].typename = "UdpSink"
**.client399.app[0].localPort = 1000
#**.client201.tcp.duptresh = default


[Config UDPCrossTraffic2]

#**.cross = ${cross = "On", "Off"}

**.client201.numApps = 1
**.client399.numApps = 1 


**.client201.app[0].typename = "UdpEcnSender"

**.client201.app[0].messageLength = 1468B

**.client201.app[0].stopTime = -1s
**.client201.app[0].sendInterval = 2.4ms #1.33ms = 9Mbps; 1.2 = 10Mbps; 1.6 = 7.5Mbps; 1ms = 12Mbps
**.client201.app[0].destPort = 1000
**.client201.app[0].destAddresses = "client399"

**.client201.app[0].startTime = 20s
**.client201.app[0].burstDuration = 10s
**.client201.app[0].sleepDuration = 10s


**.client399.app[0].typename = "UdpSink"
**.client399.app[0].localPort = 1000



[Config UdpCrossSimple]

**.client201.numApps = 1
**.client399.numApps = 1 


**.client201.app[0].typename = "UdpEcnSender"

**.client201.app[0].messageLength = 1468B

**.client201.app[0].stopTime = -1s
**.client201.app[0].sendInterval = 2.4ms #1.33ms = 9Mbps; 1.2 = 10Mbps; 1.6 = 7.5Mbps; 1ms = 12Mbps
**.client201.app[0].destPort = 1000
**.client201.app[0].destAddresses = "client399"

**.client201.app[0].startTime = 25s
**.client201.app[0].burstDuration = 100s
**.client201.app[0].sleepDuration = 0s


**.client399.app[0].typename = "UdpSink"
**.client399.app[0].localPort = 1000



[Config Dupthresh]
# Evaluating Dupthresh effect on duplicateAcks, throughput and overall performance.

#**.dupthresh = ${Dupthresh=3, 5, 10, 15, 20, 30, 50, 100, 200}
**.dupthresh = ${Dupthresh=3, 5, 100}




[Config RedMarker]



#**.routerCore*.eth[*].mac.queue.typename       = "RedMarkerQueue"
#**.routerCore*.eth[*].mac.queue.red.wq         = 1 #0.002 #0.8
#**.routerCore*.eth[*].mac.queue.red.minths     = "5" #"5"
#**.routerCore*.eth[*].mac.queue.red.maxths     = "6"  
#**.routerCore*.eth[*].mac.queue.red.maxps      = "1"
#**.routerCore*.eth[0].mac.queue.red.pkrates    = "8333.3333"
#**.routerCore*.eth[*].mac.queue.red.pkrates    = "833.3333"
#**.routerCore*.eth[*].mac.queue.red.marks 	   = "1"
#**.routerCore*.eth[*].mac.queue.red.recStart   = 0
**.routerCore*.eth[*].mac.queue.red.packetCapacity = 240 # ${queueCap = 24, 50} #24 # 24 is approx 2xBDP of RTT=14ms, datarate = 10Mbps, packet = 1460B

[Config IntervalAlpha]

**.dmpr.interval = ${interval=0.005, 0.008, 0.01..0.10 step 0.01, 0.5}
#**.dmpr.interval = ${interval= 0.02..0.10 step 0.02}
**.dmpr.alpha = ${alpha = 0.08, 0.05, 0.04, 0.03, 0.02, 0.01, 0.008, 0.005, 0.003}
#**.dmpr.alpha = ${alpha = 0.01, 0.008, 0.005, 0.003}

#**.dmpr.interval = ${interval=0.01..0.10 step 0.03, 0.5}
#**.dmpr.alpha = ${alpha = 0.1, 0.04, 0.02}


[Config Sender1]
**.arp.typename = "GlobalArp"
#
#**.cross = ${cross = "On", "Off"}
#
#**.sender1.numApps = ${1, default !cross}
#**.receiver1.numApps = ${1, default !cross}

**.sender1.numApps = 1
**.receiver1.numApps = 1

#**.client601.app[0].typename = ${"TcpSessionApp", default !cross}
**.sender1.app[0].typename = "UdpEcnSender"
#**.client601.app[0].active = ${true, default !cross}
#**.client601.app[0].localPort = ${-1, default !cross}
#**.client601.app[0].sendBytes = ${2MiB, default !cross}
**.sender1.app[0].messageLength = 1468B
#**.client601.app[0].sendScript = ${"", default !cross}
**.sender1.app[0].stopTime = -1s
# 1.33ms =9Mbps; 1.2ms=10Mbps; 1.090ms=11Mbps; 1ms= 12Mbps; 0.923ms=13Mbps; 0.857ms=14Mbps; 0.8=15Mbps
# 0.75ms=16Mbps; 0.705ms=17Mbps; 0.666ms=18Mbps; 0.631=19Mbps; 0.6ms=20Mbps
**.sender1.app[0].sendInterval = 0.8ms 
**.sender1.app[0].destPort = 1000
**.sender1.app[0].destAddresses = "receiver1"

**.sender1.app[0].startTime = 120s
**.sender1.app[0].burstDuration = 10s
**.sender1.app[0].sleepDuration = 0s


**.receiver1.app[0].typename = "UdpEcnReceiver"
**.receiver1.app[0].localPort = 1000
#**.client201.tcp.duptresh = default

[Config Sender2]
**.arp.typename = "GlobalArp"
#
#**.cross = ${cross = "On", "Off"}
#
#**.sender1.numApps = ${1, default !cross}
#**.receiver1.numApps = ${1, default !cross}

**.sender2.numApps = 1
**.receiver2.numApps = 1

#**.client601.app[0].typename = ${"TcpSessionApp", default !cross}
**.sender2.app[0].typename = "UdpEcnSender"
#**.client601.app[0].active = ${true, default !cross}
#**.client601.app[0].localPort = ${-1, default !cross}
#**.client601.app[0].sendBytes = ${2MiB, default !cross}
**.sender2.app[0].messageLength = 1468B
#**.client601.app[0].sendScript = ${"", default !cross}
**.sender2.app[0].stopTime = -1s
# 1.33ms =9Mbps; 1.2ms=10Mbps; 1.090ms=11Mbps; 1ms= 12Mbps; 0.923ms=13Mbps; 0.857ms=14Mbps; 0.8=15Mbps
# 0.75ms=16Mbps; 0.705ms=17Mbps; 0.666ms=18Mbps; 0.631=19Mbps; 0.6ms=20Mbps
**.sender2.app[0].sendInterval = 0.8ms 
**.sender2.app[0].destPort = 1000
**.sender2.app[0].destAddresses = "receiver2"

**.sender2.app[0].startTime = 120s
**.sender2.app[0].burstDuration = 10s
**.sender2.app[0].sleepDuration = 0s


**.receiver2.app[0].typename = "UdpEcnReceiver"
**.receiver2.app[0].localPort = 1000
#**.client201.tcp.duptresh = default






#####################################################################################
#####################################################################################
#                            END PARTIAL CONFIGS
#####################################################################################
#####################################################################################

