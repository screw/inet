[General]



parallel-simulation = false
warnings = true
sim-time-limit = 100s


#cmdenv-module-messages = true # for normal (non-express) mode only
#**.cmdenv-log-level = true
#cmdenv-event-banners = true   # for normal (non-express) mode only

#tkenv-plugin-path = ../../../etc/plugins


*.configurator.dumpAddresses = true
*.configurator.dumpTopology = true
*.configurator.dumpLinks = true
*.configurator.dumpRoutes = true

# Visualizer settings
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.*.displayRoutes = true
*.visualizer.networkRouteVisualizer.fadeOutMode = "simulationTime"
#*.visualizer.networkRouteVisualizer.fadeOutMode = "simulationTime"
*.visualizer.networkRouteVisualizer.fadeOutTime = 1s
*.visualizer.networkRouteVisualizer.nodeFilter = "not (routerCore*)"

#*.visualizer.interfaceTableVisualizer.nodeFilter = "not (*switch* or *Switch* or *AP*)"


#
# Network specific settings
#
# Use GlobalARP
**.arp.typename = "GlobalArp"

# OSPF

**.ospf.ospfConfig = xmldoc("ASConfig.xml")
**.ospf.helloInterval = 10s
**.ospf.retransmissionInterval = 5s
**.ospf.interfaceTransmissionDelay = 1s
**.ospf.routerDeadInterval = 40s
**.ospf.authentication.typename = "NullType"
**.ospf.authenticationKey = "0x00"


**.routerCore*.hasDmpr = true



# set inet_addr, Mask, MTU ( = 1500), default route (=router)
#**.client.routingFile = "client.mrt"
#**.router.routingFile = "router.mrt"
#**.server.routingFile = "server.mrt"

# ip settings
**.ip.procDelay = 0s
**.IPForward = false

# hookType settings
#**.eth[*].numOutputHooks = 1
#**.eth[*].outputHook[0].typename = "OrdinalBasedDropper" # Nop | ThruputMeter | OrdinalBasedDropper | OrdinalBasedDuplicator

# ARP settings
**.arp.retryTimeout = 1s
**.arp.retryCount = 3
**.arp.cacheTimeout = 100s


**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = false                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                            # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = true                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.tcpAlgorithmClass = "DcTcp"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
**.tcp.advertisedWindow = 5000000
**.tcp.recordStats = true
**.tcp.mss = 1460

**.tcp.ecnEnabled = true
**.tcp.ssthresh = 1




# Queue setting


**.routerCore*.eth[*].queue.typename       = "RedMarkerQueue"
**.routerCore*.eth[*].queue.red.wq         = 1 #0.002 #0.8
**.routerCore*.eth[*].queue.red.minths     = "3" #"5"
**.routerCore*.eth[*].queue.red.maxths     = "4"  
**.routerCore*.eth[*].queue.red.maxps      = "1"
**.routerCore*.eth[0].queue.red.pkrates    = "8333.3333"
**.routerCore*.eth[*].queue.red.pkrates    = "833.3333"
**.routerCore*.eth[*].queue.red.marks 	   = "1"
**.routerCore*.eth[*].queue.red.recStart   = 0
**.routerCore*.eth[*].queue.red.frameQueueCapacity = 24 # 24 is approx 2xBDP of RTT=14ms, datarate = 10Mbps, packet = 1460B



# Statistics collection declaration

warmup-period = 59s

**.client**.app**.statistic-recording = true
**.client**.app**.scalar-recording = true
**.client**.app**.vector-recording = true

**.red**.statistic-recording = true
**.red**.scalar-recording = true
**.red**.vector-recording = true

**.dmpr**.statistic-recording = true
**.dmpr**.scalar-recording = true
**.dmpr**.vector-recording = true


**.routerCore*.**encap.**.statistic-recording = true
**.routerCore*.**encap.**.scalar-recording = true
**.routerCore*.**encap.**.vector-recording = true

**.routerCore*.**mac.**.statistic-recording = true
**.routerCore*.**mac.**.scalar-recording = true
**.routerCore*.**mac.**.vector-recording = true

**.statistic-recording = false
**.scalar-recording = false
**.vector-recording = false


################################################################
#################### END DEFAULT config ########################
################################################################
[Config ECN-Test]
extends =  Fulltest

#network = Fulltest
**.tcp.ecnEnabled = true

**.client101.numApps = 1
**.client199.numApps = 1

**.client101.app[0].typename = "TcpSessionApp"
**.client101.app[0].active = true
**.client101.app[0].localPort = -1
**.client101.app[0].sendBytes = 100MiB
**.client101.app[0].sendScript = ""
**.client101.app[0].tClose = -1s
**.client101.app[0].connectPort = 1000
**.client101.app[0].connectAddress = "client199"

**.client101.app[0].tOpen = 20s


**.client199.app[0].typename = "TcpSinkApp"
**.client199.app[0].localPort = 1000


[Config HexSingleUdpStartStopCross]
extends = Hexagon, RedMarker, UdpCrossStartStop, SingleConnUdp, IntervalAlpha
sim-time-limit = 165s
repeat = 10

[Config HexSingleUdpSimpleCross]
extends = Hexagon, RedMarker, UdpCrossSimple, SingleConnUdp, IntervalAlpha
sim-time-limit = 140s
repeat = 10

[Config HexSingleConnUdpRedUdpCrossIntervalAlpha]
extends = Hexagon, RedMarker, UDPCrossTraffic2, SingleConnUdp, IntervalAlpha 


[Config HexSingleConnUdpRedUdpCross]
extends = Hexagon, RedMarker, UDPCrossTraffic, SingleConnUdp, hasDmpr  

[Config FullSingleConnUdpRedUdpCross]
extends = Fulltest, RedMarker, UDPCrossTraffic, SingleConnUdp, hasDmpr


[Config HexSingleConnDupthreshRedUdpCross]
extends = Hexagon, Dupthresh, RedMarker, UDPCrossTraffic, SingleConn, hasDmpr  

[Config FullSingleConnDupthreshRedUdpCross]
extends = Fulltest, Dupthresh, RedMarker, UDPCrossTraffic, SingleConn, hasDmpr

[Config HexSingleConnDupthreshRedStartCross]
extends = Hexagon, Dupthresh, RedMarker, StartCross, SingleConn, hasDmpr  

[Config FullSingleConnDupthreshRedStartCross]
extends = Fulltest, Dupthresh, RedMarker, StartCross, SingleConn, hasDmpr

[Config HexSingleConnDupthreshRed]
extends = Hexagon, Dupthresh, RedMarker, SingleConn, hasDmpr  

[Config FullSingleConnDupthreshRed]
extends = Fulltest, Dupthresh, RedMarker,SingleConn, hasDmpr


[Config HexSingleConnDupthresh]
extends = Hexagon, Dupthresh, SingleConn, hasDmpr  

[Config FullSingleConnDupthresh]
extends = Fulltest, Dupthresh, SingleConn, hasDmpr


[Config HexSingleConnRed]
extends = Hexagon, RedMarker , SingleConn, hasDmpr  

[Config FullSingleConnRed]
extends = Fulltest, RedMarker, SingleConn, hasDmpr


[Config ConnHex]
extends = Hexagon, Dupthresh, hasDmpr, Conn, CrossTraffic 


[Config ConnFull]
extends = Fulltest, Dupthresh, hasDmpr, Conn, CrossTraffic 


[Config SingleConnHex]

extends = SingleConn, Hexagon, hasDmpr


[Config SingleConnFull]

extends = SingleConn, Fulltest, hasDmpr



[Config TwoConnHex]
extends = TwoConn, Hexagon, hasDmpr

[Config TwoConnFull]
extends = TwoConn, Fulltest, hasDmpr


[Config SingleConnCrossHex]

extends = SingleConn, Hexagon, CrossTraffic, hasDmpr


[Config SingleConnCrossFull]

extends = SingleConn, Fulltest,  CrossTraffic, hasDmpr



[Config TwoConnCrossHex]
extends = TwoConn, Hexagon, CrossTraffic, hasDmpr

[Config TwoConnCrossFull]
extends = TwoConn, Fulltest, CrossTraffic hasDmpr

######################################################
####### Partial configs - NOT TO BE RUN #############
######################################################
[Config PartialConfigsStartHere]





[Config Hexagon]
network = Hexagon
**.ospf.ospfConfig = xmldoc("ASConfigHexagon.xml")

[Config Fulltest]
network = Fulltest
**.ospf.ospfConfig = xmldoc("ASConfig.xml")

[Config hasDmpr]

**.hasDmpr = ${hasDmpr = true, false}

[Config SingleConnOspf]

extends = SingleConn
**.hasDmpr = false


[Config SingleConn]
#network = Fulltest


**.client101.numApps = 1
**.client499.numApps = 1

**.client101.app[0].typename = "TcpSessionApp"
**.client101.app[0].active = true
**.client101.app[0].localPort = -1
**.client101.app[0].sendBytes = 100MiB
**.client101.app[0].sendScript = ""
**.client101.app[0].tClose = -1s
**.client101.app[0].connectPort = 1000
**.client101.app[0].connectAddress = "client499"

**.client101.app[0].tOpen = 20s


**.client499.app[0].typename = "TcpSinkApp"
**.client499.app[0].localPort = 1000

#**.client499.**tcp.tcpAlgorithmClass= ${TCP="TcpReno", "TcpTahoe", "TcpNewReno", "TcpNoCongestionControl", "DumbTcp", "TcpVegas", "TcpWestwood"}




[Config TwoConn]
#network = Fulltest



**.client101.numApps = 1
**.client199.numApps = 1
**.client499.numApps = 2

**.client1*.app[0].typename = "TcpSessionApp"
**.client1*.app[0].active = true
**.client1*.app[0].localPort = -1
**.client1*.app[0].sendBytes = 100MiB
**.client1*.app[0].sendScript = ""
**.client1*.app[0].tClose = -1s
**.client101.app[0].connectPort = 1000
**.client199.app[0].connectPort = 1001
**.client101.app[0].connectAddress = "client499"
**.client199.app[0].connectAddress = "client401"



**.client101.app[0].tOpen = 20s
**.client199.app[0].tOpen = 20s


**.client499.app[0].typename = "TcpSinkApp"
**.client499.app[0].localPort = 1000

**.client499.app[1].typename = "TcpSinkApp"
**.client499.app[1].localPort = 1001


[Config Conn]
#connections definitions

**.client101.numApps = 1
**.client199.numApps = ${default, 1 ! conn}
**.client499.numApps = ${conn= 1, 2}

**.client101.app[0].typename = "TcpSessionApp"
**.client101.app[0].active = true
**.client101.app[0].localPort = -1
**.client101.app[0].sendBytes = 100MiB
**.client101.app[0].sendScript = ""
**.client101.app[0].tClose = -1s
**.client101.app[0].connectPort = 1000
**.client101.app[0].connectAddress = "client499"

**.client199.app[0].typename = "TcpSessionApp"
#**.client199.app[0].active = ${default, true ! conn}
#**.client199.app[0].localPort = ${default, -1 ! conn}
**.client199.app[0].sendBytes = 100MiB 
#**.client199.app[0].sendScript = ${default,"" ! conn}
**.client199.app[0].tClose = -1s 


**.client199.app[0].connectPort = 1001
**.client199.app[0].connectAddress = "client401"



**.client101.app[0].tOpen = 20s
**.client199.app[0].tOpen = 20s 


**.client499.app[0].typename = "TcpSinkApp"
**.client499.app[0].localPort = 1000

**.client499.app[1].typename = "TcpSinkApp"
**.client499.app[1].localPort = 1001


[Config CrossTraffic]

**.cross = ${cross = "On", "Off"}

**.client201.numApps = ${1, default !cross}
**.client399.numApps = ${1, default !cross}

#**.client601.app[0].typename = ${"TcpSessionApp", default !cross}
**.client201.app[0].typename = "TcpSessionApp"
#**.client601.app[0].active = ${true, default !cross}
#**.client601.app[0].localPort = ${-1, default !cross}
#**.client601.app[0].sendBytes = ${2MiB, default !cross}
**.client201.app[0].sendBytes = 100MiB
#**.client601.app[0].sendScript = ${"", default !cross}
**.client201.app[0].tClose = -1s
**.client201.app[0].connectPort = 1000
**.client201.app[0].connectAddress = "client399"

**.client201.app[0].tOpen = 20s


**.client399.app[0].typename = "TcpSinkApp"
**.client399.app[0].localPort = 1000
#**.client201.tcp.duptresh = default


[Config StartCross]
extends = CrossTraffic

**.client201.app[0].tOpen = ${tOpen=19,20, 22 }s
constraint = ($cross == "On" || ($cross =="Off" && $tOpen==20))



[Config SingleConnUdp]
#
#**.cross = ${cross = "On", "Off"}
#
#**.client101.numApps = ${1, default !cross}
#**.client499.numApps = ${1, default !cross}

**.client101.numApps = 1
**.client499.numApps = 1

#**.client601.app[0].typename = ${"TcpSessionApp", default !cross}
**.client101.app[0].typename = "UdpEcnSender"
#**.client601.app[0].active = ${true, default !cross}
#**.client601.app[0].localPort = ${-1, default !cross}
#**.client601.app[0].sendBytes = ${2MiB, default !cross}
**.client101.app[0].messageLength = 1468B
#**.client601.app[0].sendScript = ${"", default !cross}
**.client101.app[0].stopTime = -1s
# 1.33ms =9Mbps; 1.2ms=10Mbps; 1.090ms=11Mbps; 1ms= 12Mbps; 0.923ms=13Mbps; 0.857ms=14Mbps; 0.8=15Mbps
# 0.75ms=16Mbps; 0.705ms=17Mbps; 0.666ms=18Mbps; 0.631=19Mbps; 0.6ms=20Mbps
**.client101.app[0].sendInterval = 0.857ms 
**.client101.app[0].destPort = 1000
**.client101.app[0].destAddresses = "client499"

**.client101.app[0].startTime = 120s
**.client101.app[0].burstDuration = 10s
**.client101.app[0].sleepDuration = 0s


**.client499.app[0].typename = "UdpEcnReceiver"
**.client499.app[0].localPort = 1000
#**.client201.tcp.duptresh = default



[Config UDPCrossTraffic]

**.cross = ${cross = "On", "Off"}

**.client201.numApps = ${1, default !cross}
**.client399.numApps = ${1, default !cross}

#**.client601.app[0].typename = ${"TcpSessionApp", default !cross}
**.client201.app[0].typename = "UdpEcnSender"
#**.client601.app[0].active = ${true, default !cross}
#**.client601.app[0].localPort = ${-1, default !cross}
#**.client601.app[0].sendBytes = ${2MiB, default !cross}
**.client201.app[0].messageLength = 1468B
#**.client601.app[0].sendScript = ${"", default !cross}
**.client201.app[0].stopTime = -1s
**.client201.app[0].sendInterval = 2.4ms #1.33ms = 9Mbps; 1.2 = 10Mbps; 1.6 = 7.5Mbps; 1ms = 12Mbps
**.client201.app[0].destPort = 1000
**.client201.app[0].destAddresses = "client399"

**.client201.app[0].startTime = 125s
**.client201.app[0].burstDuration = 10s
**.client201.app[0].sleepDuration = 10s
**.client201.app[0].packetName = "CROSS"


**.client399.app[0].typename = "UdpEcnReceiver"
**.client399.app[0].localPort = 1000
#**.client201.tcp.duptresh = default


[Config UDPCrossTraffic2]

#**.cross = ${cross = "On", "Off"}

**.client201.numApps = 1
**.client399.numApps = 1 


**.client201.app[0].typename = "UdpEcnSender"

**.client201.app[0].messageLength = 1468B

**.client201.app[0].stopTime = -1s
**.client201.app[0].sendInterval = 2.4ms #1.33ms = 9Mbps; 1.2 = 10Mbps; 1.6 = 7.5Mbps; 1ms = 12Mbps
**.client201.app[0].destPort = 1000
**.client201.app[0].destAddresses = "client399"

**.client201.app[0].startTime = 125s
**.client201.app[0].burstDuration = 10s
**.client201.app[0].sleepDuration = 10s
**.client201.app[0].packetName = "CROSS2"


**.client399.app[0].typename = "UdpEcnReceiver"
**.client399.app[0].localPort = 1000



[Config UdpCrossSimple]

**.client201.numApps = 1
**.client399.numApps = 1 


**.client201.app[0].typename = "UdpEcnSender"

**.client201.app[0].messageLength = 1468B

**.client201.app[0].stopTime = -1s
**.client201.app[0].sendInterval = 2.4ms #1.33ms = 9Mbps; 1.2 = 10Mbps; 1.6 = 7.5Mbps; 1ms = 12Mbps
**.client201.app[0].destPort = 1000
**.client201.app[0].destAddresses = "client399"

**.client201.app[0].startTime = 125s
**.client201.app[0].burstDuration = 100s
**.client201.app[0].sleepDuration = 0s
**.client201.app[0].packetName = "CROSS"


**.client399.app[0].typename = "UdpEcnReceiver"
**.client399.app[0].localPort = 1000


[Config UdpCrossStartStop]

**.client201.numApps = 1
**.client399.numApps = 1 


**.client201.app[0].typename = "UdpEcnSender"

**.client201.app[0].messageLength = 1468B

**.client201.app[0].stopTime = -1s
**.client201.app[0].sendInterval = 2.4ms #1.33ms = 9Mbps; 1.2 = 10Mbps; 1.6 = 7.5Mbps; 1ms = 12Mbps
**.client201.app[0].destPort = 1000
**.client201.app[0].destAddresses = "client399"

**.client201.app[0].startTime = 125s
**.client201.app[0].burstDuration = 10s
**.client201.app[0].sleepDuration = 10s
**.client201.app[0].packetName = "CROSS"



**.client399.app[0].typename = "UdpEcnReceiver"
**.client399.app[0].localPort = 1000


[Config Dupthresh]
# Evaluating Dupthresh effect on duplicateAcks, throughput and overall performance.

#**.dupthresh = ${Dupthresh=3, 5, 10, 15, 20, 30, 50, 100, 200}
**.dupthresh = ${Dupthresh=3, 5, 100}




[Config RedMarker]



#**.routerCore*.eth[*].queue.typename       = "RedMarkerQueue"
#**.routerCore*.eth[*].queue.red.wq         = 1 #0.002 #0.8
#**.routerCore*.eth[*].queue.red.minths     = "5" #"5"
#**.routerCore*.eth[*].queue.red.maxths     = "6"  
#**.routerCore*.eth[*].queue.red.maxps      = "1"
#**.routerCore*.eth[0].queue.red.pkrates    = "8333.3333"
#**.routerCore*.eth[*].queue.red.pkrates    = "833.3333"
#**.routerCore*.eth[*].queue.red.marks 	   = "1"
#**.routerCore*.eth[*].queue.red.recStart   = 0
**.routerCore*.eth[*].queue.red.frameQueueCapacity = 24 # ${queueCap = 24, 50} #24 # 24 is approx 2xBDP of RTT=14ms, datarate = 10Mbps, packet = 1460B

[Config IntervalAlpha]

**.dmpr.interval = ${interval=0.01..0.10 step 0.01}
**.dmpr.alpha = ${alpha = 0.08, 0.05, 0.030, 0.020, 0.010, 0.005, 0.003}





#####################################################################################
#####################################################################################
#                            END PARTIAL CONFIGS
#####################################################################################
#####################################################################################
